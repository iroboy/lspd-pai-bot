import discord
from discord.ext import commands
import json
import os
from pathlib import Path
import aiofiles

TRIGGERS_FILE = Path(__file__).parent / "triggers.json"


async def load_config():
    async with aiofiles.open("config.json", 'r', encoding='utf-8') as f:
        config_data = await f.read()
    return json.loads(config_data)


class TriggerView(discord.ui.View):
    def __init__(self, cog, config):
        super().__init__(timeout=None)
        self.cog = cog
        self.message = None  # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
        self.config = config
        
        self.head_sai = config.get("head_sai")
        
    async def check_user_role(self, interaction: discord.Interaction):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏."""
        has_role = any(role.id == self.cog.head_sai for role in interaction.user.roles)
        if not has_role:
            await interaction.response.send_message("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å", style=discord.ButtonStyle.green)
    async def add(self, interaction: discord.Interaction, button: discord.ui.Button):
        if await self.check_user_role(interaction):
        	await interaction.response.send_modal(AddTriggerModal(self.cog))

    @discord.ui.button(label="‚ûñ –£–¥–∞–ª–∏—Ç—å", style=discord.ButtonStyle.danger)
    async def remove(self, interaction: discord.Interaction, button: discord.ui.Button):
        if await self.check_user_role(interaction):
        	await interaction.response.send_modal(RemoveTriggerModal(self.cog))

    @discord.ui.button(label="üìã –°–ø–∏—Å–æ–∫", style=discord.ButtonStyle.blurple)
    async def list(self, interaction: discord.Interaction, button: discord.ui.Button):
        if await self.check_user_role(interaction):
            if not self.cog.triggers:
                await interaction.response.send_message("‚ùå –¢—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", ephemeral=True)
                return

            embed = discord.Embed(title="üìã –¢—Ä–∏–≥–≥–µ—Ä—ã", color=discord.Color.blurple())
            for trigger, response in self.cog.triggers.items():
                embed.add_field(name=trigger, value=response, inline=False)
            await interaction.response.send_message(embed=embed, ephemeral=True)

    @discord.ui.button(label="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", style=discord.ButtonStyle.red)
    async def delete_message(self, interaction: discord.Interaction, button: discord.ui.Button):
        if await self.check_user_role(interaction):
            if self.message:
                await self.message.delete()
                await interaction.response.send_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", ephemeral=True)
            else:
                await interaction.response.send_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", ephemeral=True)



class AddTriggerModal(discord.ui.Modal, title="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä"):
    trigger = discord.ui.TextInput(label="–ö–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞/—Å–ª–æ–≤–æ:", max_length=150, placeholder="–ü—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å—Å—è")
    response = discord.ui.TextInput(label="–û—Ç–≤–µ—Ç:", style=discord.TextStyle.paragraph, max_length=500)

    def __init__(self, cog):
        super().__init__()
        self.cog = cog

    async def on_submit(self, interaction: discord.Interaction):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.cog.triggers[self.trigger.value.lower()] = self.response.value
        self.cog.save_triggers()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        await interaction.response.send_message(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: `{self.trigger.value}` ‚Üí `{self.response.value}`", ephemeral=True)


class RemoveTriggerModal(discord.ui.Modal, title="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä"):
    trigger = discord.ui.TextInput(label="–ö–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞/—Å–ª–æ–≤–æ:", max_length=100)

    def __init__(self, cog):
        super().__init__()
        self.cog = cog

    async def on_submit(self, interaction: discord.Interaction):
        key = self.trigger.value.lower()
        if key in self.cog.triggers:
            del self.cog.triggers[key]
            self.cog.save_triggers()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            await interaction.response.send_message(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ç—Ä–∏–≥–≥–µ—Ä: `{key}`", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä `{key}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)


class AutoMessage(commands.Cog):
    def __init__(self, bot, config):
        self.bot = bot
        self.config = config

        self.allowed_role_id = config.get("cadet_role")
        self.target_channel_id = config.get("automessage_channel")
        self.head_sai = config.get("head_sai")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
        self.triggers = self.load_triggers()

    def load_triggers(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if os.path.exists(TRIGGERS_FILE):
            with open(TRIGGERS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}

    def save_triggers(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ñ–∞–π–ª"""
        with open(TRIGGERS_FILE, "w", encoding="utf-8") as f:
            json.dump(self.triggers, f, indent=4, ensure_ascii=False)

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if message.author.bot:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (—ç—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
        if message.content.startswith(self.bot.command_prefix):
            return

        if message.channel.id != self.target_channel_id:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
        if self.allowed_role_id:
            has_role = any(role.id == self.allowed_role_id for role in message.author.roles)
            if not has_role:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏

        content = message.content.lower()
        for trigger, response in self.triggers.items():
            if trigger in content:
                await message.reply(response)
                break

    @commands.command(name="triggermenu")
    async def trigger_menu(self, ctx):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
        has_role = any(role.id == self.head_sai for role in ctx.author.roles)
        if not has_role:
            await ctx.send("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–ª—å
        print(f"User {ctx.author} has the required role. Proceeding with trigger menu.")

        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
            await ctx.message.delete()
            print("Message with command deleted.")

            # –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º config –≤ TriggerView
            self_message_view = TriggerView(self, self.config)
            msg = await ctx.send("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏:", view=self_message_view)
            print(f"Message sent with view: {msg.id}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º view
            self_message_view.message = msg  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ view
            await msg.edit(view=self_message_view)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º view
            print("View updated on message.")

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞
            print(f"Error occurred: {e}")
            await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")




async def setup(bot):
    config = await load_config()
    await bot.add_cog(AutoMessage(bot, config))
