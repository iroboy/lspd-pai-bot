import discord
from discord.ext import commands
import pytz
from datetime import datetime, timedelta
from collections import defaultdict
import asyncio
import json
import aiofiles
import re



exams = '—É—Å—Ç–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω + test arest'
tz_moscow = pytz.timezone('Europe/Moscow')


def get_last_saturday():
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    now_msk = datetime.now(tz_moscow)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É–±–±–æ—Ç—ã
    days_since_saturday = (now_msk.weekday() - 5) % 7  # 5 - —Å—É–±–±–æ—Ç–∞

    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞, –±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â—É—é
    if days_since_saturday == 0:
        days_since_saturday = 7  

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ—à–ª–æ–π —Å—É–±–±–æ—Ç—ã
    last_saturday = now_msk - timedelta(days=days_since_saturday)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è 22:00
    last_saturday_at_22_00 = last_saturday.replace(hour=22, minute=0, second=0, microsecond=0)

    return last_saturday_at_22_00.astimezone(tz_moscow)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ú–°–ö



class Count(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.head = None
        self.sai_role = None


    async def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.json"""
        async with aiofiles.open('config.json', 'r', encoding='utf-8') as f:
            config_data = await f.read()
        
        global config
        config = json.loads(config_data)
        self.head = config["head_sai"]
        self.sai_role = config["role_id"]


    @commands.command()
    async def count_authors(self, ctx):
        await self.load_config()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
        allowed_roles = set(self.head) if isinstance(self.head, list) else {int(self.head)}
        user_roles = {role.id for role in ctx.author.roles}

        if not allowed_roles & user_roles:
            msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            await asyncio.sleep(4)
            await msg.delete()
            await ctx.message.delete()
            return

        await ctx.message.delete()

        last_saturday = get_last_saturday()
        now_msk = datetime.now(tz_moscow)

        # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
        last_saturday_naive = last_saturday.replace(tzinfo=None)
        now_msk_naive = now_msk.replace(tzinfo=None)

        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
        message_counts = defaultdict(int)
        other_tags = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive, limit=2000):
            member = message.author  
            if member.bot:  
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤

            has_role = any(role.id == self.sai_role for role in member.roles)

            if has_role:
                message_counts[member.id] += 1
            else:
                other_tags += 1

        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        if not message_counts:
            await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"## üìä  –°–æ–æ–±—â–µ–Ω–∏—è —Å **{last_saturday.strftime('%d-%m %H:%M')}** –ø–æ **{now_msk.strftime('%d-%m %H:%M')}**\n"
        )

        sorted_counts = sorted(message_counts.items(), key=lambda x: x[1], reverse=True)

        for user_id, count in sorted_counts:
            member = ctx.guild.get_member(user_id)
            username = member.display_name if member else f"Unknown ({user_id})"
            response += f"**{username}**: **{count}** —Å–æ–æ–±—â–µ–Ω–∏–π\n"

        response += f"\n–î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: **{other_tags}**\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: **{sum(message_counts.values()) + other_tags}**"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° –∏–ª–∏ –≤ —á–∞—Ç
        try:
            await ctx.author.send(response)
        except discord.Forbidden:
            await ctx.send(f"‚ö†Ô∏è {ctx.author.mention}, —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã –õ–°! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—é–¥–∞:\n{response}")
    
    @commands.command()
    async def count_mentions(self, ctx):
        await self.load_config()  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        print("üîÑ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω!")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        allowed_roles = set(self.head) if isinstance(self.head, list) else {int(self.head)}
        user_roles = {role.id for role in ctx.author.roles}

        if not allowed_roles & user_roles:
            msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            await asyncio.sleep(4)
            await msg.delete()
            await ctx.message.delete()
            return

        await ctx.message.delete()

        last_saturday = get_last_saturday()
        now_msk = datetime.now(tz_moscow)

        # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
        last_saturday_naive = last_saturday.replace(tzinfo=None)
        now_msk_naive = now_msk.replace(tzinfo=None)

        mention_counts = defaultdict(int)
        other_tags = 0

        async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive, limit=2000):
            match = re.search(r"1\.\s+<@!?(\d+)>", message.content)
            if match:
                first_mention_id = int(match.group(1))
                member = ctx.guild.get_member(first_mention_id)

                if member:
                    has_sai_role = any(role.id == self.sai_role for role in member.roles)

                    if has_sai_role:
                        if exams in message.content.lower():
                            mention_counts[first_mention_id] += 2
                        else:
                            mention_counts[first_mention_id] += 1
                    else:
                        other_tags += 1
                else:
                    other_tags += 1

        if not mention_counts:
            await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            print("‚ö†Ô∏è –ù–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
            return

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"## üìä  –†–µ–∑—É–ª—å—Ç–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å **{last_saturday.strftime('%d-%m %H:%M')}** "
            f"–ø–æ **{now_msk.strftime('%d-%m %H:%M')}**:\n"
        )

        sorted_mentions = sorted(mention_counts.items(), key=lambda x: x[1], reverse=True)

        for user_id, count in sorted_mentions:
            member = ctx.guild.get_member(user_id)
            username = member.display_name if member else (await self.bot.fetch_user(user_id)).name
            response += f"**{username}**: **{count}** —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"

        response += f"\n–î—Ä—É–≥–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: **{other_tags}**\n"
        response += f"–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: **{sum(mention_counts.values()) + other_tags}**"

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –õ–°
        if not ctx.author.dm_channel:
            await ctx.author.create_dm()

        try:
            await ctx.author.send(response)
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç –≤ –õ–°!")
        except discord.Forbidden:
            await ctx.send(f"‚ö†Ô∏è {ctx.author.mention}, —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã –õ–°! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—é–¥–∞:\n{response}")   
    
    @commands.command()
    async def count_reactions(self, ctx):
        try:
            await self.load_config()  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            print("üîÑ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            allowed_roles = set(self.head) if isinstance(self.head, list) else {int(self.head)}
            user_roles = {role.id for role in ctx.author.roles}

            if not allowed_roles & user_roles:
                msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                await asyncio.sleep(4)
                await msg.delete()
                await ctx.message.delete()
                return

            await ctx.message.delete()

            last_saturday = get_last_saturday()
            now_msk = datetime.now(tz_moscow)

            # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
            last_saturday_naive = last_saturday.replace(tzinfo=None)
            now_msk_naive = now_msk.replace(tzinfo=None)

            reaction_counts = defaultdict(int)
            other_tags = 0

            # ‚úÖ –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
            async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive, limit=2000):
                for reaction in message.reactions:
                    async for user in reaction.users():
                        if user.bot:
                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤

                        member = ctx.guild.get_member(user.id)
                        has_sai_role = member and any(role.id == self.sai_role for role in member.roles) if member else False

                        if has_sai_role:
                            reaction_counts[user.id] += 1
                        else:
                            other_tags += 1  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è —É—á—Ç–µ–Ω–∞

            if not reaction_counts:
                await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.")
                return

            # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            response = (
                f"## üìä  –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ —Å **{last_saturday.strftime('%d-%m %H:%M')}** "
                f"–ø–æ **{now_msk.strftime('%d-%m %H:%M')}**:\n"
            )

            sorted_reactions = sorted(reaction_counts.items(), key=lambda x: x[1], reverse=True)

            for user_id, count in sorted_reactions:
                member = ctx.guild.get_member(user_id)
                username = member.display_name if member else (await self.bot.fetch_user(user_id)).name
                response += f"**{username}**: **{count}** —Ä–µ–∞–∫—Ü–∏–∏\n"

            response += f"\n–î—Ä—É–≥–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: **{other_tags}**\n"
            response += f"–í—Å–µ–≥–æ —Ä–µ–∞–∫—Ü–∏–π: **{sum(reaction_counts.values()) + other_tags}**"

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –õ–° (–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –õ–° –∑–∞–∫—Ä—ã—Ç—ã)
            if not ctx.author.dm_channel:
                await ctx.author.create_dm()

            try:
                await ctx.author.send(response)
                print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°!")
            except discord.Forbidden:
                await ctx.send(f"‚ö†Ô∏è {ctx.author.mention}, —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã –õ–°! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—é–¥–∞:\n{response}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    @commands.command()
    async def count_invites(self, ctx):
        try:
            await self.load_config()  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            print("üîÑ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            allowed_roles = set(self.head) if isinstance(self.head, list) else {int(self.head)}
            user_roles = {role.id for role in ctx.author.roles}

            if not allowed_roles & user_roles:
                msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                await asyncio.sleep(4)
                await msg.delete()
                await ctx.message.delete()
                return

            await ctx.message.delete()

            last_saturday = get_last_saturday()
            now_msk = datetime.now(tz_moscow)

            # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
            last_saturday_naive = last_saturday.replace(tzinfo=None)
            now_msk_naive = now_msk.replace(tzinfo=None)

            # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
            mention_counts = defaultdict(int)
            other_tags = 0

            async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive, limit=2000):
                if not (message.author.bot or message.webhook_id):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –±–æ—Ç–∞

                if "–ø—Ä–∏–Ω–∏–º–∞–µ—Ç" in message.content.lower():
                    mention_match = re.search(r"<@!?(\d+)>", message.content)  # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–≥ –≤—Ä—É—á–Ω—É—é
                    if mention_match:
                        first_user_id = int(mention_match.group(1))  # –ë–µ—Ä—ë–º ID –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–≥–∞
                        member = ctx.guild.get_member(first_user_id)
                        has_sai_role = member and any(role.id == self.sai_role for role in member.roles) if member else False

                        if has_sai_role:
                            mention_counts[first_user_id] += 1  # ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–ª—å, —Å—á–∏—Ç–∞–µ–º
                        else:
                            other_tags += 1  # ‚ùå –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Å—á–∏—Ç–∞–µ–º –≤ other_tags

            if not mention_counts:
                await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—è—Ç–∏–π —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.")
                return



            response = (
                f"## üìä –ü—Ä–∏–Ω—è—Ç–æ –ª—é–¥–µ–π –≤ –ø–µ—Ä–∏–æ–¥ —Å **{last_saturday.strftime('%d-%m %H:%M')}** "
                f"–ø–æ **{now_msk.strftime('%d-%m %H:%M')}:**\n"
            )

            sorted_mentions = sorted(mention_counts.items(), key=lambda x: x[1], reverse=True)

            for user_id, count in sorted_mentions:
                member = ctx.guild.get_member(user_id)
                username = member.display_name if member else (await self.bot.fetch_user(user_id)).name
                response += f"**{username}**: **{count}** –ø—Ä–∏–Ω—è—Ç–∏–π\n"

            response += f"\n–î—Ä—É–≥–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è: **{other_tags}**\n" + f"–í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ: **{sum(mention_counts.values()) + other_tags}** —á–µ–ª–æ–≤–µ–∫"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ –õ–°
            try:
                await ctx.author.send(response)
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç –≤ –õ–°!")
            except discord.Forbidden:
                await ctx.send(f"‚ö†Ô∏è {ctx.author.mention}, —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã –õ–°! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—é–¥–∞:\n{response}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")  # –õ–æ–≥ –æ—à–∏–±–∫–∏
            await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}") 

    @commands.command()
    async def count_apps(self, ctx):
        await self.load_config()  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ `self.head` —Å–ø–∏—Å–∫–æ–º
        allowed_roles = set(self.head) if isinstance(self.head, list) else {int(self.head)}

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
        user_roles = {role.id for role in ctx.author.roles}

        if not allowed_roles & user_roles:
            msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            await asyncio.sleep(4)
            await msg.delete()
            return
        
        await ctx.message.delete()
        
        last_saturday = get_last_saturday()
        now_msk = datetime.now(tz_moscow)

        # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
        last_saturday_naive = last_saturday.replace(tzinfo=None)
        now_msk_naive = now_msk.replace(tzinfo=None)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        mention_counts = defaultdict(int)

        other_tags = 0
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
        async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive, limit=2000):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º
            if message.author.bot:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–æ–≤–æ '–ø—Ä–∏–Ω–∏–º–∞–µ—Ç'
                if "–ø–æ–≤—ã—à–∞–µ—Ç" in message.content.lower():
                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    for user in message.mentions:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
                        has_role_ = any(role.id == self.sai_role for role in user.roles)

                        if has_role_:
                            mention_counts[user.id] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if not mention_counts:
            await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"## üìä –û—Ç—á—ë—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –ø–µ—Ä–∏–æ–¥ —Å **{str(last_saturday_naive.day).zfill(2)}-{str(last_saturday_naive.month).zfill(2)} {str(last_saturday_naive.hour).zfill(2)}:{str(last_saturday_naive.minute).zfill(2)}** –ø–æ **{str(now_msk.day).zfill(2)}-{str(now_msk.month).zfill(2)} {str(now_msk.hour).zfill(2)}:{str(now_msk.minute).zfill(2)}:**\n"
                
        for user_id, count in mention_counts.items():
            member = ctx.guild.get_member(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

            if member:
                username = member.display_name  # –ù–∏–∫–Ω–µ–π–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            else:
                user = await self.bot.fetch_user(user_id)  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
                username = user.name  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–º—è
                response += f"**{username}**: **{count}** –æ—Ç—á—ë—Ç–æ–≤\n"
            response += f"\n–î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: **{other_tags}** –æ—Ç—á—ë—Ç–æ–≤\n" + f"–í—Å–µ–≥–æ: **{sum(mention_counts.values()) + other_tags}** –æ—Ç—á—ë—Ç–æ–≤"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await ctx.author.send(response)

    @commands.command()
    async def count_lic(self, ctx):
        try:
            await self.load_config()  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            print("üîÑ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω!")

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            allowed_roles = set(self.head) if isinstance(self.head, list) else {int(self.head)}
            user_roles = {role.id for role in ctx.author.roles}

            if not allowed_roles & user_roles:
                msg = await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
                await asyncio.sleep(4)
                await msg.delete()
                await ctx.message.delete()
                return

            await ctx.message.delete()

            last_saturday = get_last_saturday()
            now_msk = datetime.now(tz_moscow)

            # –î–µ–ª–∞–µ–º –Ω–∞–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
            last_saturday_naive = last_saturday.replace(tzinfo=None)
            now_msk_naive = now_msk.replace(tzinfo=None)

            message_counts = defaultdict(int)
            other_tags = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            async for message in ctx.channel.history(after=last_saturday_naive, before=now_msk_naive, limit=2000):
                member = message.author
                if member.bot:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤

                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Member, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª–∏
                member = ctx.guild.get_member(member.id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Member

                if member is None:
                    continue  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                has_role = any(role.id == self.sai_role for role in member.roles)
                content = message.content.lower()

                # –ü–æ–¥—Å—á—ë—Ç –ª–∏—Ü–µ–Ω–∑–∏–π
                points = 0
                if "12000" in content or "12.000" in content:
                    points = 1
                elif "24000" in content or "24.000" in content:
                    points = 2
                elif "36000" in content or "36.000" in content:
                    points = 3
                elif "48000" in content or "48.000" in content:
                    points = 4

                if has_role:
                    message_counts[member.id] += points
                else:
                    other_tags += points

            if not message_counts:
                await ctx.send("‚ö†Ô∏è –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–∏—Ü–µ–Ω–∑–∏—è–º–∏.")
                print("‚ö†Ô∏è –ù–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–π!")
                return

            # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            response = (
                f"## üìä  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π —Å **{last_saturday.strftime('%d-%m %H:%M')}** "
                f"–ø–æ **{now_msk.strftime('%d-%m %H:%M')}:**\n"
            )

            sorted_licenses = sorted(message_counts.items(), key=lambda x: x[1], reverse=True)

            for user_id, count in sorted_licenses:
                member = ctx.guild.get_member(user_id)
                username = member.display_name if member else (await self.bot.fetch_user(user_id)).name
                response += f"**{username}**: **{count}** –ª–∏—Ü–µ–Ω–∑–∏–π\n"

            response += f"\n–î—Ä—É–≥–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏: **{other_tags}**\n–í—Å–µ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–π: **{sum(message_counts.values()) + other_tags}**"

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°
            try:
                await ctx.author.send(response)
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç –≤ –õ–°!")
            except discord.Forbidden:
                await ctx.send(f"‚ö†Ô∏è {ctx.author.mention}, —É –≤–∞—Å –∑–∞–∫—Ä—ã—Ç—ã –õ–°! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—é–¥–∞:\n{response}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")  # –õ–æ–≥ –æ—à–∏–±–∫–∏
            await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def setup(bot):
    await bot.add_cog(Count(bot))
        


