import discord
from discord.ext import commands, tasks
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import aiofiles
import asyncio
import pytz
import re
from datetime import datetime
from discord.ui import Button, View, Modal, TextInput
from discord.utils import get
from google.auth.transport.requests import Request
from google.auth.exceptions import RefreshError
import gspread_asyncio
from google.oauth2.service_account import Credentials
from gspread_asyncio import AsyncioGspreadClientManager

# –ü–æ–∏—Å–∫   
async def extract_name_from_app(full_name: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ —á–∏—Å–ª–∞."""
    full_name = re.sub(r'\s*[|/\\]\s*', ' ', full_name)  # –£–±–∏—Ä–∞–µ–º | / \
    full_name = re.sub(r'\s+\b[Ii]\b\s+', ' ', full_name)  # –£–±–∏—Ä–∞–µ–º I/l, –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç–æ—è—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    full_name = re.sub(r'\d+', '', full_name).strip()  # –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã

    words = [word for word in full_name.split() if word.isalpha()]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
    return " ".join(words[:2]) if len(words) >= 2 else ""  # –ë–µ—Ä–µ–º –∏–º—è + —Ñ–∞–º–∏–ª–∏—é

async def extract_name_from_nick(nick: str):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã, –ª–∏—à–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, I, l –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è + —Ñ–∞–º–∏–ª–∏—é."""
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (Cur SAI, Head SAI, Ass.Shr. SAI, D.Head SAI –∏ —Ç. –¥.)
    nick = re.sub(r'^(Cur.|Head.|Inst|H\.Inst|Ass\.Shrf\.|D\.Head.|Cur|Head|Inst.|H\.Inst.|Ass\.Shr\.|D\.Head|SAI|SA)\s+', '', nick).strip()

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å—ë –µ—â—ë –µ—Å—Ç—å "SAI" –∏–ª–∏ "SA", —É–±–∏—Ä–∞–µ–º –∏—Ö
    nick = re.sub(r'\b(SAI|SA)\b', '', nick).strip()

    # –£–±–∏—Ä–∞–µ–º "I" –∏–ª–∏ "l", –µ—Å–ª–∏ –æ–Ω–∏ —Å—Ç–æ—è—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    nick = re.sub(r'\b[IiLl]\b', '', nick).strip()

    # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (|, /, \), –∑–∞–º–µ–Ω—è—è –∏—Ö –Ω–∞ –ø—Ä–æ–±–µ–ª
    nick = re.sub(r'\s*[|/\\]+\s*', ' ', nick).strip()

    # –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ "II", "I I", "ll", "l l"
    nick = re.sub(r'\b[Ii]{2}\b|\b[Ii]\s+[Ii]\b|\b[Ll]{2}\b|\b[Ll]\s+[Ll]\b', '', nick).strip()

    # –£–¥–∞–ª—è–µ–º ID (—á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ü–µ)
    nick = re.sub(r'\s*\d+$', '', nick).strip()

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    words = nick.split()
    unique_words = []
    for word in words:
        if word not in unique_words:
            unique_words.append(word)

    return " ".join(unique_words[:2]) if len(unique_words) >= 2 else ""  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é

async def find_user_by_name(guild, name_status):
    exam_name = await extract_name_from_app(name_status)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –∑–∞—è–≤–∫–∏
    
    if not exam_name:
        return None  # –ï—Å–ª–∏ –≤ –∑–∞—è–≤–∫–µ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    for member in guild.members:
        discord_name = await extract_name_from_nick(member.display_name)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –Ω–∏–∫–∞ –≤ Discord
        
        if discord_name.lower() == exam_name.lower():
            return member  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
    
    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

async def extract_name_and_id(nick: str):
    """–û—á–∏—â–∞–µ—Ç –Ω–∏–∫ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤, —É–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–º—è, ID)"""

    # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (| / \) ‚Üí –ø—Ä–æ–±–µ–ª
    nick = re.sub(r'\s*[\|/\\]+\s*', ' ', nick)

    # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ "I", "l" (–æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ, –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
    nick = re.sub(r'\b[IiLl]\b', '', nick).strip()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –≥–¥–µ —É–≥–æ–¥–Ω–æ
    nick = re.sub(
        r'\b(Cur|Head|D\.?Head|Inst|Inst\.?|H\.?Inst|Ass\.?Shrf?|SAI|SA)\b\.?', '', 
        nick, 
        flags=re.IGNORECASE
    )

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    nick = re.sub(r'\s+', ' ', nick).strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID
    parts = nick.rsplit(' ', 1)
    if len(parts) == 2 and parts[1].isdigit():
        name = parts[0]
        static = parts[1]
    else:
        name = nick
        static = "–ù–µ—Ç ID"

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
    words = name.split()
    unique_words = []
    for word in words:
        if word not in unique_words:
            unique_words.append(word)

    return " ".join(unique_words), static


async def load_config():
    async with aiofiles.open('config.json', 'r', encoding='utf-8') as f:
        config_data = await f.read()
    return json.loads(config_data)

class Exams(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.client = self.init_gspread()
        self.sheet = None
        self.channel = None
        self.role_mention = None
        self.role_id = None
        self.head_sai = None
        self.exam_link = None
        self.results_link = None
        self.active_sessions = {}

    def get_msk_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è."""
        tz_moscow = pytz.timezone('Europe/Moscow')
        return datetime.now(tz_moscow).strftime("%H:%M")

    
    def init_gspread(self):
        # """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets"""
        try:
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
            return gspread.authorize(creds)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            return None
    
    
    async def load_config(self):
        # """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.json"""
        async with aiofiles.open('config.json', 'r', encoding='utf-8') as f:
            config_data = await f.read()
        
        global config
        config = json.loads(config_data)

        channel_id = config["channel_id"]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        await self.bot.wait_until_ready()  # ‚úÖ –ñ–¥—ë–º, –ø–æ–∫–∞ –±–æ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ

        self.channel = self.bot.get_channel(channel_id)
        self.role_mention = config["role_mention"]
        self.role_id = config["role_id"]
        self.head_sai = config["head_sai"]
        self.exam_link = config["exam_link"]
        self.results_link = config["results_link"]
        self.results_id = config["results_id"]

        # üé≠ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏
        self.custom_yes = config["custom_yes"]
        self.custom_no = config["custom_no"]
        self.custom_wait = config["custom_wait"]
        self.custom_ding = config["custom_ding"]

        try:
            self.sheet = self.client.open_by_key(config["sheet_id"]).sheet1
            print("‚úÖ Google-—Ç–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

        if self.channel is None:
            print(f"–ö–∞–Ω–∞–ª —Å ID {config['channel_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        self.check_new_rows.start()

    @tasks.loop(seconds=50)
    async def check_new_rows(self):
       # """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ Google Sheets –∫–∞–∂–¥—ã–µ 50 —Å–µ–∫—É–Ω–¥"""
        heartbeat_counter = 0  

        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if self.sheet is None:
            print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
            self.sheet = self.client.open_by_key(config["sheet_id"]).sheet1

        while True:
            try:
                if self.sheet is None:
                    print("üî¥ –û—à–∏–±–∫–∞: –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                    self.sheet = self.client.open_by_key(config["sheet_id"]).sheet1
                    await asyncio.sleep(10)
                    continue  

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                if heartbeat_counter >= 240:
                    print(f"{self.get_msk_time()} üíì Heartbeat: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Google Sheets...")
                    try:
                        _ = self.sheet.get_all_values()
                        print(f"{self.get_msk_time()} ‚úî Heartbeat: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                    except gspread.exceptions.APIError:
                        print(f"{self.get_msk_time()} ‚ö†Ô∏è Heartbeat: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                        self.sheet = self.client.open_by_key(config["sheet_id"]).sheet1  

                    heartbeat_counter = 0  

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = self.sheet.get_all_values()
                for i, row in enumerate(data[1:], start=2):  
                    if len(row) < 4:  
                        continue

                    text1, text2, status = row[1].strip(), row[2].strip(), row[3].strip().lower()

                    if text1 and text2 and status in ["", "false"]:  
                        await self.send_to_discord(text1, text2)
                        self.sheet.update_cell(i, 4, "true")  

                heartbeat_counter += 1  
                await asyncio.sleep(50)
            
            
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def send_to_discord(self, text1, text2):
        """–°–æ–∑–¥–∞—ë—Ç `ExamSession` –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–∞–Ω–∞–ª"""
        session = ExamSession(self, text1, text2)
        await session.send_exam(self.channel)

    @commands.Cog.listener()
    async def on_ready(self):
        # –¢–µ–ø–µ—Ä—å –º—ã –≤—ã–∑—ã–≤–∞–µ–º load_config –≤ on_ready, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        await self.load_config()

class ExamSession:
    def __init__(self, cog, text1, text2):
        self.cog = cog
        self.text1 = text1
        self.text2 = text2
        self.exam_type = text2
        self.msg = None
        self.accepted_by = None
        self.candidate_mention = ""

        # –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        self.initial_view = View(timeout=None)
        accept_btn = Button(label="–ü—Ä–∏–Ω—è—Ç—å —ç–∫–∑–∞–º–µ–Ω", style=discord.ButtonStyle.green, emoji=self.cog.custom_yes)
        accept_btn.callback = self.on_accept_exam
        cancel_btn = Button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", style=discord.ButtonStyle.danger, emoji=self.cog.custom_no)
        cancel_btn.callback = self.on_cancel_exam
        self.initial_view.add_item(accept_btn)
        self.initial_view.add_item(cancel_btn)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è
        self.finish_view = View(timeout=None)
        finish_btn = Button(label="–ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", style=discord.ButtonStyle.green, emoji=self.cog.custom_yes)
        finish_btn.callback = self.on_finish_exam
        no_show_btn = Button(label="–ù–µ —è–≤–∏–ª—Å—è", style=discord.ButtonStyle.danger, emoji=self.cog.custom_no)
        no_show_btn.callback = self.on_no_show
        self.finish_view.add_item(finish_btn)
        self.finish_view.add_item(no_show_btn)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        self.processed_view = View(timeout=None)
        processed_btn = Button(label="–≠–∫–∑–∞–º–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω", style=discord.ButtonStyle.secondary, disabled=True)
        self.processed_view.add_item(processed_btn)

    
    async def send_dm_to_candidate(self, kind: str, *, reason=None, instructor=None):
        # """
        # kind: 'start' | 'cancelled' | 'no_show'
        # reason: –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã (–¥–ª—è 'cancelled')
        # instructor: —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞
        # """
        member = await find_user_by_name(self.msg.guild, self.text1)
        if not member:
            return

        try:
            if kind == "start":
                msg = (
                    f"{self.cog.custom_ding} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í–∞—Å –æ–∂–∏–¥–∞—é—Ç –Ω–∞ **{self.exam_type}**.\n"
                    f"–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ: {self.cog.exam_link}\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ **5 –º–∏–Ω—É—Ç**."
                )
            elif kind == "cancelled":
                msg = (
                    f"{self.cog.custom_ding} –í–∞—à **{self.exam_type}** –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** *{reason}*\n"
                    f"**–û—Ç–º–µ–Ω–∏–ª(–∞)**: {instructor or '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä SAI'}"
                )
            elif kind == "no_show":
                msg = (
                    f"{self.cog.custom_no} –í—ã –Ω–µ —è–≤–∏–ª–∏—Å—å –Ω–∞ **{self.exam_type}**.\n"
                    f"–≠–∫–∑–∞–º–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã.\n"
                    f"–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ **{self.exam_type}** –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –µ—â—ë —Ä–∞–∑."
                )
            else:
                return

            await member.send(msg)

        except discord.Forbidden:
            print(f"üì™ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {member.display_name}")

    
    
    async def send_exam(self, channel):
        embed = discord.Embed(title="–ù–æ–≤–∞—è –ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω!", color=0x00ff00)
        embed.add_field(name="–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫", value=self.text1, inline=False)
        embed.add_field(name="–ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞–≤–∞—Ç—å?", value=self.text2, inline=False)
        embed.set_footer(text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {self.cog.get_msk_time()} (–ú–°–ö)")

        self.msg = await channel.send(content=self.cog.role_mention, embed=embed, view=self.initial_view)

    async def on_accept_exam(self, interaction):
        await interaction.response.defer()
        try:
            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            member = interaction.user
            user_roles = {role.id for role in member.roles}  

            # ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —á–∏—Å–ª–æ–º)
            allowed_roles = set(self.cog.role_id) if isinstance(self.cog.role_id, list) else {self.cog.role_id}
            admin_roles = set(self.cog.head_sai) if isinstance(self.cog.head_sai, list) else {self.cog.head_sai}

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ —Ä–æ–ª–µ–π
            if not (allowed_roles & user_roles or admin_roles & user_roles):
                await interaction.followup.send(f"{self.cog.custom_no} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —ç–∫–∑–∞–º–µ–Ω–∞.", ephemeral=True)
                return
            

            exam_candidate = await find_user_by_name(interaction.guild, self.text1)
            self.candidate_mention = exam_candidate.mention if exam_candidate else ""

            if not self.candidate_mention:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—ã
                await interaction.followup.send(
                    f"{self.cog.custom_no} –≠–∫–∑–∞–º–µ–Ω –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: *–Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–∏–∫–Ω–µ–π–º –≤ –∑–∞—è–≤–∫–µ, —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.*\n"
                    f"-# *–û—Ç–º–µ–Ω—ë–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º {interaction.user.mention}*."
                )

                await self.msg.edit(view=self.processed_view)
                return

            self.accepted_by = interaction.user.id
            await self.msg.edit(view=self.finish_view)
            await self.msg.edit(content=f"{self.cog.role_mention} | –≠–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä: {interaction.user.mention}")

            await self.send_dm_to_candidate("start")
            await interaction.followup.send(f"{self.cog.custom_yes} –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ó–∞—Ö–æ–¥–∏—Ç–µ –≤ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—É—é –∏ –æ–∂–∏–¥–∞–π—Ç–µ.", ephemeral=True)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    async def on_finish_exam(self, interaction: discord.Interaction):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω
            member = interaction.guild.get_member(interaction.user.id)
            exam_admin_role = discord.utils.get(member.roles, id=self.cog.head_sai)

            if interaction.user.id != self.accepted_by and not exam_admin_role:
                await interaction.response.send_message(f"{self.cog.custom_no} –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç —ç–∫–∑–∞–º–µ–Ω.", ephemeral=True)
                return

            exam_candidate = await find_user_by_name(interaction.guild, self.text1)
            self.candidate_mention = exam_candidate.mention if exam_candidate else ""

            for item in self.finish_view.children:
                item.disabled = True

            await interaction.response.send_modal(
                ExamCompletionModal(
                    self, exam_candidate, self.candidate_mention, self.finish_view,
                    self.cog.results_link, self.exam_type, interaction.guild,
                    self.text1, self.text2, self.cog
                )
            )

            await self.msg.edit(view=self.processed_view)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_finish_exam: {e}")
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    async def on_no_show(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()

            member = interaction.guild.get_member(interaction.user.id)
            exam_admin_role = discord.utils.get(member.roles, id=self.cog.head_sai)

            if interaction.user.id != self.accepted_by and not exam_admin_role:
                await interaction.response.send_message(f"{self.cog.custom_no} –¢–æ–ª—å–∫–æ —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—è–≤–∫—É.", ephemeral=True)
                return

            exam_candidate = await find_user_by_name(interaction.guild, self.text1)
            self.candidate_mention = exam_candidate.mention if exam_candidate else ""

            for item in self.finish_view.children:
                item.disabled = True

            await self.msg.edit(view=self.finish_view)

            await self.msg.edit(view=self.processed_view)

            await self.send_dm_to_candidate("no_show")
            await interaction.followup.send(f"{self.cog.custom_yes} –°–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_no_show: {e}")
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)

    async def on_cancel_exam(self, interaction: discord.Interaction):
        try:
            member = interaction.guild.get_member(interaction.user.id)
            user_roles = {role.id for role in member.roles}

            allowed_roles = set()
            if isinstance(self.cog.role_id, list):
                allowed_roles.update(self.cog.role_id)
            else:
                allowed_roles.add(self.cog.role_id)

            if isinstance(self.cog.head_sai, list):
                allowed_roles.update(self.cog.head_sai)
            else:
                allowed_roles.add(self.cog.head_sai)

            if not allowed_roles & user_roles:
                await interaction.response.send_message(f"{self.cog.custom_no} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞.", ephemeral=True)
                return

            await interaction.response.send_modal(CancelExamModal(self, self.cog))
            await self.msg.edit(view=self.processed_view)


        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_cancel_exam: {e}")
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)

class ExamCompletionModal(Modal):
    def __init__(self, exam_session, exam_candidate, candidate_mention, finish_view, results_link, exam_type, guild, text1, text2, cog):
        super().__init__(title="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞")
        self.exam_session = exam_session
        self.exam_candidate = exam_candidate
        self.candidate_mention = candidate_mention
        self.finish_view = finish_view
        self.results_link = results_link
        self.exam_type = exam_type  
        self.guild = guild
        self.text1 = text1
        self.text2 = text2
        self.cog = cog

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result = TextInput(label="–†–µ–∑—É–ª—å—Ç–∞—Ç", placeholder="–°–¥–∞–ª(–∞) / –ù–µ —Å–¥–∞–ª(–∞)", required=True)
        self.add_item(self.result)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            exam_result = self.result.value.capitalize()

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_channel = interaction.guild.get_channel(int(self.exam_session.cog.results_id))

            if not results_channel:
                await interaction.followup.send("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º—ã
            self.exam_candidate = await find_user_by_name(self.guild, self.text1)
            if self.exam_candidate:
                self.candidate_mention = self.exam_candidate.mention
            else:
                self.candidate_mention = "–ù–µ –Ω–∞–π–¥–µ–Ω"

            nick_sai, static_sai = await extract_name_and_id(interaction.user.display_name)
            nick_sa, static_sa = await extract_name_and_id(self.exam_candidate.display_name)

            if results_channel:
                await results_channel.send(
                    f"1. {interaction.user.mention} | {nick_sai} | {static_sai} \n"
                    f"2. {self.exam_candidate.mention} | {nick_sa} | {static_sa} \n"
                    f"3. {exam_result} {self.exam_type.lower()} \n"
                )
            else:
                await interaction.response.send_message("–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return

        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_submit: {e}")
            await interaction.followup.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)

class CancelExamModal(Modal):
    def __init__(self, exam_session, cog):
        self.cog = cog
        super().__init__(title="–û—Ç–º–µ–Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞")
        self.exam_session = exam_session
        self.reason = TextInput(label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã", placeholder="–ü—Ä–∏–º–µ—Ä: –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –Ω–∏–∫–Ω–µ–π–º.", required=True)
        self.add_item(self.reason)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

            # –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–≠–∫–∑–∞–º–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
            await self.exam_session.msg.edit(view=self.exam_session.processed_view)


            await self.exam_session.send_dm_to_candidate("cancelled", reason=self.reason.value, instructor=interaction.user.mention)
            await interaction.followup.send(f"{self.cog.custom_yes} –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ–ª–æ–≤–µ–∫—É.", ephemeral=True)


        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_submit: {e}")
            await interaction.followup.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)

async def setup(bot):
    cog = Exams(bot)
    await bot.add_cog(cog)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≥